defaultTasks "wrapper", "watch", "dependencies", "build", "test"

def aptPackages = ["libspock-java", "nodejs", "nodejs-legacy", "npm"]
def npmPackages = ["mocha"]
def path = System.getProperty("user.dir")
def srcDir = "${path}/src"
def testDir = "${path}/test"

task wrapper(type: Wrapper) {
  description "Creates the project wrapper."
  gradleVersion = "3.4.1"
}

task watch(type: Exec) {
  description "Watches for changes."
  inputs.files(srcDir, testDir)
  commandLine "true"

  new ByteArrayOutputStream()
}

task dependencies() {
  description "Installs all dependencies."

  dependsOn {
    tasks.findAll { task ->
      task.name.startsWith("dependencies") && !task.name.equals("dependencies")
    }
  }
}

task aptUpdate(type: Exec) {
  description "Updates APT repository information."
  workingDir path
  commandLine "apt-get"
  args "update"

  new ByteArrayOutputStream()
}

task dependenciesApt(type: Exec, dependsOn: aptUpdate) {
  description "Installs APT dependencies."
  workingDir path
  commandLine "apt-get"
  args = ["install", "-y"] + aptPackages

  new ByteArrayOutputStream()
}

task dependenciesNpm(type: Exec) {
  description "Installs NPM dependencies."
  workingDir path
  commandLine "npm"
  args = ["install"] + npmPackages

  new ByteArrayOutputStream()
}

task build() {
  description "Builds all project sources."

  dependsOn {
    tasks.findAll { task ->
      task.name.startsWith("build") && !task.name.equals("build")
    }
  }
}

task test() {
  description "Runs all test cases."

  dependsOn {
    tasks.findAll { task ->
      task.name.startsWith("test") && !task.name.equals("test")
    }
  }
}

fileTree(dir: "${testDir}", include: "**/*.groovy").each { File testFile ->
  def fileName = testFile.getName().split("\\.")[0]

  task "test${fileName}"(type: Exec) {
    description "Runs the ${fileName} case."
    workingDir path
    commandLine "groovy"
    args "-cp", "/usr/share/java/spock-core.jar", testFile

    new ByteArrayOutputStream()
  }
}

task testMocha(type: Exec) {
  description "Runs Mocha test cases."
  workingDir path
  commandLine "./node_modules/mocha/bin/mocha"

  new ByteArrayOutputStream()
}
